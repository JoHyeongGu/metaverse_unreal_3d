2025.01.14 (화)

< Constant3Vector 대신 TextureSample을 사용하여 액터에 텍스쳐를 적용해보기 >
    Texture Coordinate (U 누른 상태로 좌클릭) : 텍스쳐의 U와 V 방향으로 반복 패턴을 설정하는 노드
    Custom Rotator: 회전을 커스텀 할 수 있는 노드 / UV를 적용하면 UV가 적용된 상태로 회전 가능

    Texture Sample노드로 마스크 영역을 분리해서
    각 영역에 Lerp노드로 색상을 부여하여 택스쳐를 만들 수 있다.

< 노드 프리뷰 시작 >
    해당 노드까지 적용된 모습을 뷰포트를 통해 미리 볼 수 있다.

< Fresnel 노드 >
    시야각에 따라 시야의 수직 부분과 평행 부분을 자연스럽게 마스킹하여 
    Lerp노드의 Alpha값에 할당하여 자연스러운 마스크 기능을 구현 할 수 있다. 
    (ex. 벨벳 재질의 천)

< Detail Texturing 노드 >
    Scale, DiffuseIntensity, NormalInstensity 값에 Constant 값들을 할당하고
    DetailDiffuse, DetailNormal 값에 Texture Sample 들을 Texture Object로 변환하여 할당하고
    Diffuse에 앞서 만든 Lerp(Fresnel이 적용된) 노드를 할당하고
    출력의 Diffuse는 Base Color, Normal은 노멀에 할당한다면
    좀 더 디테일한 텍스쳐를 구현할 수 있다.
    (
        정확한 Detail Texturing의 기능은 자세히 이해하지 못 했음 (이제 이해함 ㅋ)
        - 이해한 바로는, 거리에 따라 Texture를 다르게 할당하는 역할 -> (이거 아님 ㅋ)
            기본 텍스쳐에 더 디테일한 텍스쳐를 섞어서 더 리얼한 텍스쳐를 만들어주는 노드임
            Diffuse에 기본 텍스쳐를 할당하고
            Detail Diffuse에 스크레치나 자잘한 디테일 요소가 들어가있는 Texture Object를 할당해주면
            잔기스나 이런 표현이 가능하고 거기에 입체감을 표현한 Texture Object를 넣은
            Detail Normal까지 할당해주면 입체감 디테일까지 마치 마스킹 작업을 한 것 처럼 더 구체적으로 바뀜
            거기에 Scale값으로 Detail의 패턴 빈도 수를 조절해주면 더 자세하게 세팅할 수 있음
    )

< 준절차적 머티리얼 생성 >
    텍스쳐의 패턴이 반복되어 부자연스러워 보이는 부분을 완화시키자
    여러 샘플 텍스쳐들을 Texture Coordinate 노드로 가공하고 
    (Desaturation 노드로 채도도 조절할 수 있다. like 탈색)
    T_MacroVariation 텍스쳐와 같이 랜덤 마스킹 패턴을 가진 텍스쳐를 Alpha로 
    Lerp 노드를 활용해 적용함으로써
    하나의 텍스쳐만 사용하는 것이 아닌 비슷한 여러 텍스쳐로 랜덤한 패턴을 만들어,
    보다 자연스러운 패턴을 만든다.

<GameMode>
    (변동적인 데이터는 저장 X, 정적인 게임 규칙과 관련된 데이터만 저장)
    * 원하는 게임모드를 블루프린트로 작성하자
    * Default Pawn Class
    * Player Start
    * 카메라 설정

    게임스테이트 클래스: 모든 플레이어의 상태를 최신 상태로 유지하게 해주는 클래스
    (싱글 플레이 게임은 플레이어 스테이트 클래스를 더 많이 사용함)
    플레이어 스테이트 클래스: 게임 플레이어들의 상태를 관리하는 클래스 (ex. 점수, HP 등등)
    (AI는 플레이어 스테이트를 갖지 않음)
    게임 스테이트 -> 공유 데이터 / 플레이어 스테이트 -> 각각 데이터

    폰 클래스 제작: Add Movement Input 노드를 사용해 쉽게 움직임을 구현할 수 있다.
    다만, GameMode Class도 만들어서 Default Pawn을 해당 클래스로 설정해야하고
    카메라 컴포넌트와 Spring Arm 컴포넌트를 추가하고, Floating Pawn Movement 컴포넌트도 추가하여야한다.
    (Floating Pawn Movement는 Add Movement Input 함수를 사용 시 필요)

< 입력 키 매핑 >
    기능은 같지만 입력 키가 다른 경우 (플랫폼에 따른 컨트롤러 차이)
    Action Mappings
    Axis Mappings
    Project Settings/Input(입력)/Mapping Key 생성 가능
    해당 Key의 이름을 BP 내에서 입력 시, 이벤트 노드 생성 가능

< 애니메이션 >
    BP 내부의 뷰포트에서 애니메이션 탭의 애니메이션 모드는 기본적으로
    Use Animation Blueprint로 설정되어 있다.

    옛날에는 Use Animation Asset을 사용하여 애니메이션을 트리거 했었는데
    자신의 이벤트그래프에서 이벤트를 받으면 Set Animation으로 에셋을 바꿔주는 형태로 동작했었다.

내일은 Use Animation Blueprint를 사용하는 방법을 터득한다.